function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(BinaryProvider.safe_isfile), String})
    precompile(Tuple{typeof(BinaryProvider.info_onchange), String, String, Int64})
    precompile(Tuple{typeof(BinaryProvider.detect_libgfortran_abi), String, BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.detect_libgfortran_abi), String, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.parse_7z_list), String})
    precompile(Tuple{typeof(BinaryProvider.platform_key_abi), Base.SubString{String}})
    precompile(Tuple{typeof(BinaryProvider.libdir), BinaryProvider.Prefix})
    precompile(Tuple{typeof(BinaryProvider.detect_libgfortran_abi), String, BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.readuntil_many), Base.Pipe, Array{Char, 1}})
    precompile(Tuple{typeof(BinaryProvider.parse_dl_name_version), String, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.parse_dl_name_version), String, BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.probe_symlink_creation), String})
    precompile(Tuple{typeof(BinaryProvider.locate), BinaryProvider.ExecutableProduct})
    precompile(Tuple{typeof(BinaryProvider.extract_platform_key), String})
    precompile(Tuple{typeof(BinaryProvider.triplet), BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.triplet), BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.triplet), BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.triplet), BinaryProvider.FreeBSD})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.MacOS, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.platform_key_abi), String})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.Linux, BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.package), BinaryProvider.Prefix, String, Base.VersionNumber})
    precompile(Tuple{typeof(BinaryProvider.parse_tar_list), String})
    precompile(Tuple{typeof(BinaryProvider.choose_download), Base.Dict{BinaryProvider.Platform, String}, BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.choose_download), Base.Dict{BinaryProvider.Platform, Tuple{String, String}}, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.choose_download), Base.Dict{BinaryProvider.Platform, String}, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.__init__)})
    precompile(Tuple{typeof(BinaryProvider.choose_download), Base.Dict{BinaryProvider.Platform, String}, BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.Linux, BinaryProvider.UnknownPlatform})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.Windows, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.wordsize), BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.wordsize), BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.wordsize), BinaryProvider.FreeBSD})
    precompile(Tuple{typeof(BinaryProvider.parse_dl_name_version), String, BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.libdir), BinaryProvider.Prefix, BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.UnknownPlatform, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.platform_key_abi)})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.MacOS, BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.libdir), BinaryProvider.Prefix, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.Linux, BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.list_tarball_files), String})
    precompile(Tuple{typeof(BinaryProvider.arch), BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.platforms_match), BinaryProvider.Linux, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.arch), BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.platform_dlext)})
    precompile(Tuple{typeof(BinaryProvider.locate), BinaryProvider.LibraryProduct})
    precompile(Tuple{typeof(BinaryProvider.triplet), BinaryProvider.UnknownPlatform})
    precompile(Tuple{typeof(BinaryProvider.platform_dlext), BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.arch), BinaryProvider.FreeBSD})
    precompile(Tuple{typeof(BinaryProvider.collect_stdout), BinaryProvider.OutputCollector})
    precompile(Tuple{typeof(BinaryProvider.extract_name_version_platform_key), String})
    precompile(Tuple{typeof(BinaryProvider.platform_dlext), BinaryProvider.FreeBSD})
    precompile(Tuple{typeof(BinaryProvider.platform_dlext), BinaryProvider.Linux})
    precompile(Tuple{typeof(BinaryProvider.collect_stderr), BinaryProvider.OutputCollector})
    precompile(Tuple{typeof(BinaryProvider.platform_dlext), BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.platform_dlext), BinaryProvider.UnknownPlatform})
    precompile(Tuple{typeof(BinaryProvider.arch), BinaryProvider.UnknownPlatform})
    precompile(Tuple{typeof(BinaryProvider.valid_dl_path), String, BinaryProvider.Windows})
    precompile(Tuple{typeof(BinaryProvider.valid_dl_path), String, BinaryProvider.MacOS})
    precompile(Tuple{typeof(BinaryProvider.valid_dl_path), String, BinaryProvider.Linux})
end
